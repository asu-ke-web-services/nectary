<?xml version="1.0" encoding="UTF-8"?>
<class xmlns="http://xml.phpdox.net/src" full="Nectary\Daos\Select_SQL_Query_Builder" namespace="Nectary\Daos" name="Select_SQL_Query_Builder" abstract="false" final="false" start="13" end="212">
  <file path="/var/www/html/gios-api-php/vendor/gios-asu/nectary/src/daos" file="sql-query-builder.php" realpath="/var/www/html/gios-api-php/vendor/gios-asu/nectary/src/daos/sql-query-builder.php" size="5253" time="2017-12-14T00:49:12+00:00" unixtime="1513212552" sha1="dcd834a1863a42e003c815be10916eb1c99c4729" relative="daos/sql-query-builder.php"/>
  <docblock>
    <description compact="Select_SQL_Query_Builder - Helper class for building PDO select statements"/>
    <author value="Ryan Raub"/>
  </docblock>
  <member name="columns_to_select" visibility="private" static="false" line="18">
    <docblock>
      <description compact="Internal state for this object"/>
    </docblock>
  </member>
  <member name="group_by" visibility="private" static="false" line="19"/>
  <constructor name="__construct" start="24" end="34" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Sets up default state"/>
    </docblock>
  </constructor>
  <method name="add_columns" start="42" end="44" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="This function takes either a string or an one dimensional array.">the string can be a single column name or multiple columns comma separated.</description>
      <param description=": string or array of column names to select" type="object" variable="$new_columns">
        <type full="Nectary\Daos\string|array" namespace="Nectary\Daos" name="string|array"/>
      </param>
    </docblock>
    <parameter name="new_columns" byreference="false" type="{unknown}"/>
  </method>
  <method name="get_columns" start="51" end="53" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Mainly for debugging, probably wont need this"/>
      <return description=": the current columns this query will select from" type="object">
        <type full="Nectary\Daos\string|array" namespace="Nectary\Daos" name="string|array"/>
      </return>
    </docblock>
  </method>
  <method name="from" start="60" end="62" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="For setting what table to select from, can only be one table. For joins see joins()"/>
      <param description=": name of table to select" type="string" variable="$table"/>
    </docblock>
    <parameter name="table" byreference="false" type="object">
      <type full="Nectary\Daos\string" namespace="Nectary\Daos" name="string"/>
    </parameter>
  </method>
  <method name="joins" start="69" end="71" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="For adding a join, can be called multiple times for multiple joins."/>
      <param description=": sql fragment of the join statement" type="string" variable="$join_statement"/>
    </docblock>
    <parameter name="join_statement" byreference="false" type="object">
      <type full="Nectary\Daos\string" namespace="Nectary\Daos" name="string"/>
    </parameter>
  </method>
  <method name="limit" start="78" end="83" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="For setting a limit on the query other than the default"/>
      <param type="object" variable="$new_limit">
        <type full="Nectary\Daos\int|string" namespace="Nectary\Daos" name="int|string"/>
      </param>
    </docblock>
    <parameter name="new_limit" byreference="false" type="{unknown}"/>
  </method>
  <method name="offset" start="90" end="95" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="For setting a offset on the query other than the default"/>
      <param type="object" variable="$offset">
        <type full="Nectary\Daos\int|string" namespace="Nectary\Daos" name="int|string"/>
      </param>
    </docblock>
    <parameter name="offset" byreference="false" type="{unknown}"/>
  </method>
  <method name="order_by" start="102" end="104" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="For setting an order on the query other than the default. Currently Can't have multiple."/>
      <param description=": eg: &quot;first_name ASC&quot;" type="string" variable="$order"/>
    </docblock>
    <parameter name="order" byreference="false" type="object">
      <type full="Nectary\Daos\string" namespace="Nectary\Daos" name="string"/>
    </parameter>
  </method>
  <method name="group_by" start="111" end="113" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="For setting an group by on the query other than the default."/>
      <param type="string" variable="$group"/>
    </docblock>
    <parameter name="group" byreference="false" type="object">
      <type full="Nectary\Daos\string" namespace="Nectary\Daos" name="string"/>
    </parameter>
  </method>
  <method name="where" start="121" end="123" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Adds a string to the where clause, it must start with an 'AND' or 'OR' to chain together criteria."/>
      <param description=": eg: &quot;AND blah = foo&quot;" type="string" variable="$string"/>
    </docblock>
    <parameter name="string" byreference="false" type="object">
      <type full="Nectary\Daos\string" namespace="Nectary\Daos" name="string"/>
    </parameter>
  </method>
  <method name="and_where" start="130" end="132" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Adds a string to the where clause with an 'AND'"/>
      <param description=": eg: &quot;blah = foo&quot;" type="string" variable="$string"/>
    </docblock>
    <parameter name="string" byreference="false" type="object">
      <type full="Nectary\Daos\string" namespace="Nectary\Daos" name="string"/>
    </parameter>
  </method>
  <method name="or_where" start="139" end="141" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Adds a string to the where clause with an 'AND'"/>
      <param description=": eg: &quot;blah = foo&quot;" type="string" variable="$string"/>
    </docblock>
    <parameter name="string" byreference="false" type="object">
      <type full="Nectary\Daos\string" namespace="Nectary\Daos" name="string"/>
    </parameter>
  </method>
  <method name="bind_value" start="150" end="155" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Adds a variable to be bound to in the prepared statement"/>
      <param type="string" variable="$name"/>
      <param type="mixed" variable="$value"/>
      <param type="object" variable="$data_type">
        <type full="Nectary\Daos\bool|string" namespace="Nectary\Daos" name="bool|string"/>
      </param>
    </docblock>
    <parameter name="name" byreference="false" type="object">
      <type full="Nectary\Daos\string" namespace="Nectary\Daos" name="string"/>
    </parameter>
    <parameter name="value" byreference="false" type="{unknown}"/>
    <parameter name="data_type" byreference="false" type="boolean" default="false"/>
  </method>
  <method name="get_sql" start="162" end="192" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Uses the current state of the object to build the sql statement"/>
      <return description=": the sql select statement as a string" type="string"/>
    </docblock>
  </method>
  <method name="get_statement" start="201" end="211" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Calls get_sql() to generate the sql and then creates the prepared statement and binds its values."/>
      <param description=": a pdo database connection" type="object" variable="$db">
        <type full="PDO" namespace="" name="PDO"/>
      </param>
      <return type="object">
        <type full="PDOStatement" namespace="" name="PDOStatement"/>
      </return>
    </docblock>
    <parameter name="db" byreference="false" type="{unknown}"/>
  </method>
</class>
